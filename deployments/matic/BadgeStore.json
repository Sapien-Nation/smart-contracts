{
  "address": "0x59cD3d76cC9EA4f626629337664A3CbD78F48474",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_spn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_revenueAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "badgeId",
          "type": "uint256"
        }
      ],
      "name": "BadgeCreate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "badgeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BadgeGrant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "badgeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BadgePurchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_badgeId",
          "type": "uint256"
        }
      ],
      "name": "badgeAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_badgeId",
          "type": "uint256"
        }
      ],
      "name": "badgePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "badgeProps",
      "outputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_badgeAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "createBadge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_badgeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "grantBadge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_badgeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "purchaseBadge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_badgeIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "purchaseBadgeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revenueAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_badgeAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_badgeId",
          "type": "uint256"
        }
      ],
      "name": "setBadgeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_badgeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setBadgePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "setCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "setCreatorBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        }
      ],
      "name": "setPlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_revenueAddress",
          "type": "address"
        }
      ],
      "name": "setRevenueAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spn",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xda239262b0e61a970543f063bf5268e79dd7856eb46caf6e1f052cb04400b44f",
  "receipt": {
    "to": null,
    "from": "0xeF60a8E421639Fc8A63b98118c5b780579b1009A",
    "contractAddress": "0x59cD3d76cC9EA4f626629337664A3CbD78F48474",
    "transactionIndex": 0,
    "gasUsed": "3411861",
    "logsBloom": "0x
    "blockHash": "0x310ef15beaa4ed749a09710c797f674fe7d46402d98c39bdb0416515b884070e",
    "transactionHash": "0xda239262b0e61a970543f063bf5268e79dd7856eb46caf6e1f052cb04400b44f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18363124,
        "transactionHash": "0xda239262b0e61a970543f063bf5268e79dd7856eb46caf6e1f052cb04400b44f",
        "address": "0x59cD3d76cC9EA4f626629337664A3CbD78F48474",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ef60a8e421639fc8a63b98118c5b780579b1009a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x310ef15beaa4ed749a09710c797f674fe7d46402d98c39bdb0416515b884070e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18363124,
        "transactionHash": "0xda239262b0e61a970543f063bf5268e79dd7856eb46caf6e1f052cb04400b44f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ef60a8e421639fc8a63b98118c5b780579b1009a",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c1f11caed92000000000000000000000000000000000000000000000000000f0185c6004266000000000000000000000000000000000000000000000000000079ebe375633cac0000000000000000000000000000000000000000000000000ef566b43554d40000000000000000000000000000000000000000000000000000860af54050ceac",
        "logIndex": 1,
        "blockHash": "0x310ef15beaa4ed749a09710c797f674fe7d46402d98c39bdb0416515b884070e"
      }
    ],
    "blockNumber": 18363124,
    "cumulativeGasUsed": "3411861",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Sapien Badge Store",
    "https://sapien.network/badges/{id}.json",
    "v3",
    "0x8174Ab11EEd70297311f7318a71d9e9f48466Fff",
    "0xeF60a8E421639Fc8A63b98118c5b780579b1009A",
    "0xeF60a8E421639Fc8A63b98118c5b780579b1009A"
  ],
  "solcInputHash": "521647357d04f8f7f273135358011674",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_spn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_revenueAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badgeId\",\"type\":\"uint256\"}],\"name\":\"BadgeCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badgeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BadgeGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badgeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BadgePurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_badgeId\",\"type\":\"uint256\"}],\"name\":\"badgeAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_badgeId\",\"type\":\"uint256\"}],\"name\":\"badgePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"badgeProps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_badgeAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"createBadge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_badgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"grantBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_badgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"purchaseBadge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_badgeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"purchaseBadgeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_badgeAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_badgeId\",\"type\":\"uint256\"}],\"name\":\"setBadgeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_badgeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setBadgePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setCreatorBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revenueAddress\",\"type\":\"address\"}],\"name\":\"setRevenueAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spn\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"badgeAdmin(uint256)\":{\"details\":\"Return admin address of badge token.\"},\"badgePrice(uint256)\":{\"details\":\"Return price of badge token.\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"details\":\"See {IERC1155Tradable-burn}.\"},\"burnBatch(address,uint256[],uint256[])\":{\"details\":\"See {IERC1155Tradable-burnBatch}.\"},\"createBadge(address,uint256)\":{\"details\":\"Create new badge type. Accessible only by governance. `_badgeAdmin` cannot be the zero address.\"},\"exists(uint256)\":{\"details\":\"See {IERC1155Tradable-exists}.\"},\"grantBadge(address,uint256,uint256)\":{\"details\":\"Grant badge for free. Accessible only by badge token admin. `_to` cannot be the zero address.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"purchaseBadge(uint256,uint256)\":{\"details\":\"Purchase badge token.\"},\"purchaseBadgeBatch(uint256[],uint256[])\":{\"details\":\"Batch version of {purchaseBadge}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setBadgeAdmin(address,uint256)\":{\"details\":\"Return admin address of badge token.\"},\"setBadgePrice(uint256,uint256)\":{\"details\":\"Set price of badge token.\"},\"setCreator(address,uint256)\":{\"details\":\"See {IERC1155Tradable-setCreator}.\"},\"setCreatorBatch(address,uint256[])\":{\"details\":\"See {IERC1155Tradable-setCreatorBatch}.\"},\"setGovernance(address)\":{\"details\":\"Set platform governance address.\"},\"setPlatformFee(uint256)\":{\"details\":\"Set platform fee.\"},\"setRevenueAddress(address)\":{\"details\":\"Set revenue address.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BadgeStore.sol\":\"BadgeStore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x09c24182fc76ee97a5c604b6ff1a8afb3648535b6ba1820c23b243a40cc792a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/BadgeStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./ERC1155Tradable.sol\\\";\\r\\nimport \\\"./interfaces/IBadgeStore.sol\\\";\\r\\n\\r\\ncontract BadgeStore is ERC1155Tradable, ReentrancyGuard, IBadgeStore {\\r\\n    struct BadgeProp {\\r\\n        address admin;\\r\\n        uint256 price; // priced in SPN\\r\\n    }\\r\\n\\r\\n    // SPN token address\\r\\n    IERC20 public spn;\\r\\n    // Address that collects platform fee.\\r\\n    address public revenueAddress;\\r\\n    // Platform governance account.\\r\\n    address public governance;\\r\\n\\r\\n    uint256 public platformFee = 5;\\r\\n    uint256 public constant FEE_DENOMINATOR = 100;\\r\\n\\r\\n    mapping(uint256 => BadgeProp) public badgeProps;\\r\\n\\r\\n    event BadgeCreate(address indexed admin, uint256 badgeId);\\r\\n\\r\\n    event BadgePurchase(address indexed recipient, uint256 badgeId, uint256 amount);\\r\\n\\r\\n    event BadgeGrant(address indexed recipient, uint256 badgeId, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _uri,\\r\\n        string memory _version,\\r\\n        IERC20 _spn,\\r\\n        address _revenueAddress,\\r\\n        address _governance\\r\\n    )\\r\\n        ERC1155Tradable(_name, _uri, _version)\\r\\n    {\\r\\n        spn = _spn;\\r\\n        revenueAddress = _revenueAddress;\\r\\n        governance = _governance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return price of badge token.\\r\\n     */\\r\\n    function badgePrice(\\r\\n        uint256 _badgeId\\r\\n    )\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        view\\r\\n        existentTokenOnly(_badgeId)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return badgeProps[_badgeId].price;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return admin address of badge token.\\r\\n     */\\r\\n    function badgeAdmin(\\r\\n        uint256 _badgeId\\r\\n    )\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        view\\r\\n        existentTokenOnly(_badgeId)\\r\\n        returns (address)\\r\\n    {\\r\\n        return badgeProps[_badgeId].admin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set revenue address.\\r\\n     */\\r\\n    function setRevenueAddress(\\r\\n        address _revenueAddress\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_revenueAddress != address(0), \\\"BadgeStore#setRevenueAddress: INVALID_ADDRESS\\\");\\r\\n        revenueAddress = _revenueAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set platform governance address.\\r\\n     */\\r\\n    function setGovernance(\\r\\n        address _governance\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_governance != address(0), \\\"BadgeStore#setGovernance: INVALID_ADDRESS\\\");\\r\\n        governance = _governance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set price of badge token.\\r\\n     */\\r\\n    function setBadgePrice(\\r\\n        uint256 _badgeId,\\r\\n        uint256 _price\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        virtual\\r\\n        existentTokenOnly(_badgeId)\\r\\n    {\\r\\n        require(msgSender() == badgeAdmin(_badgeId), \\\"BadgeStore#setBadgePrice: CALLER_NO_BADGE_ADMIN\\\");\\r\\n        _setBadgePrice(_badgeId, _price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set platform fee.\\r\\n     */\\r\\n    function setPlatformFee(\\r\\n        uint256 _platformFee\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        require(msgSender() == governance, \\\"BadgeStore#setPlatformFee: CALLER_NO_GOVERNANCE\\\");\\r\\n        platformFee = _platformFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return admin address of badge token.\\r\\n     */\\r\\n    function setBadgeAdmin(\\r\\n        address _badgeAdmin,\\r\\n        uint256 _badgeId\\r\\n    )\\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        existentTokenOnly(_badgeId)\\r\\n    {\\r\\n        require(msgSender() == governance, \\\"BadgeStore#setBadgeAdmin: CALLER_NO_GOVERNANCE\\\");\\r\\n        _setBadgeAdmin(_badgeAdmin, _badgeId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create new badge type.\\r\\n     * Accessible only by governance.\\r\\n     * `_badgeAdmin` cannot be the zero address.\\r\\n     */\\r\\n    function createBadge(\\r\\n        address _badgeAdmin,\\r\\n        uint256 _price\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(msgSender() == governance, \\\"BadgeStore#createBadge: CALLER_NO_GOVERNANCE\\\");\\r\\n        uint256 badgeId = _create(_badgeAdmin, 1, \\\"\\\");\\r\\n        emit BadgeCreate(_badgeAdmin, badgeId);\\r\\n        _setBadgePrice(badgeId, _price);\\r\\n        _setBadgeAdmin(_badgeAdmin, badgeId);\\r\\n        return badgeId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Purchase badge token.\\r\\n     */\\r\\n    function purchaseBadge(\\r\\n        uint256 _badgeId,\\r\\n        uint256 _amount\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        existentTokenOnly(_badgeId)\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(_amount > 0, \\\"BadgeStore#purchaseBadge: INVALID_AMOUNT\\\");\\r\\n        _purchaseBadge(msgSender(), _badgeId, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grant badge for free.\\r\\n     * Accessible only by badge token admin.\\r\\n     * `_to` cannot be the zero address.\\r\\n     */\\r\\n    function grantBadge(\\r\\n        address _to,\\r\\n        uint256 _badgeId,\\r\\n        uint256 _amount\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        existentTokenOnly(_badgeId)\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(msgSender() == badgeAdmin(_badgeId), \\\"BadgeStore#grantBadge: CALLER_NO_BADGE_ADMIN\\\");\\r\\n        require(_to != address(0), \\\"BadgeStore#grantBadge: INVALID_ADDRESS\\\");\\r\\n        require(_amount > 0, \\\"BadgeStore#grantBadge: INVALID_AMOUNT\\\");\\r\\n        _mint(_to, _badgeId, _amount, \\\"\\\");\\r\\n        emit BadgeGrant(_to, _badgeId, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch version of {purchaseBadge}.\\r\\n     */\\r\\n    function purchaseBadgeBatch(\\r\\n        uint256[] memory _badgeIds,\\r\\n        uint256[] memory _amounts\\r\\n    )\\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(_badgeIds.length == _amounts.length, \\\"BadgeStore#purchaseBadgeBatch: PARAMS_LENGTH_MISMATCH\\\");\\r\\n        for (uint256 i = 0; i < _badgeIds.length; i++) {\\r\\n            _purchaseBadge(msgSender(), _badgeIds[i], _amounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Purchase badge.\\r\\n     */\\r\\n    function _purchaseBadge(\\r\\n        address _account,\\r\\n        uint256 _badgeId,\\r\\n        uint256 _amount\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        if (badgeProps[_badgeId].price > 0) {\\r\\n            uint256 spnAmount = badgeProps[_badgeId].price * _amount;\\r\\n            uint256 feeAmount = spnAmount * platformFee / FEE_DENOMINATOR;\\r\\n            require(spn.balanceOf(_account) >= spnAmount, \\\"BadgeStore#_purchaseBadge: INSUFFICIENT_FUNDS\\\");\\r\\n            spn.transferFrom(_account, revenueAddress, feeAmount);\\r\\n            spn.transferFrom(_account, badgeAdmin(_badgeId), spnAmount - feeAmount);\\r\\n        }\\r\\n        _mint(_account, _badgeId, _amount, \\\"\\\");\\r\\n        emit BadgePurchase(_account, _badgeId, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set price of badge token.\\r\\n     */\\r\\n    function _setBadgePrice(\\r\\n        uint256 _badgeId,\\r\\n        uint256 _price\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        badgeProps[_badgeId].price = _price;\\r\\n    }\\r\\n\\r\\n    function _setBadgeAdmin(\\r\\n        address _badgeAdmin,\\r\\n        uint256 _badgeId\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n    {\\r\\n        badgeProps[_badgeId].admin = _badgeAdmin;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a9722c31490fe7e0d747b800e9349f8d05611457c04763cdeb8658d46f69d66\",\"license\":\"MIT\"},\"contracts/ERC1155Tradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"./interfaces/IERC1155Tradable.sol\\\";\\r\\nimport \\\"./metatx-standard/EIP712MetaTransaction.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC1155Tradable\\r\\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin,\\r\\n like exists() and totalSupply()\\r\\n */\\r\\ncontract ERC1155Tradable is ERC1155, Ownable, EIP712MetaTransaction, IERC1155Tradable {\\r\\n    uint256 public tokenID;\\r\\n    mapping(uint256 => address) public creator;\\r\\n    mapping(uint256 => uint256) public tokenSupply;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _uri,\\r\\n        string memory _version\\r\\n    )\\r\\n        ERC1155(_uri)\\r\\n        EIP712MetaTransaction(_name, _version)\\r\\n    { }\\r\\n\\r\\n    /**\\r\\n     * @dev Require msgSender() to be the creator of the token id.\\r\\n     */\\r\\n    modifier onlyCreator(\\r\\n        uint256 _id\\r\\n    )\\r\\n    {\\r\\n        require(creator[_id] == msgSender(), \\\"ERC1155Tradable#onlyCreator: CALLER_NO_CREATOR\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Require msgSender() to own at least 1 token.\\r\\n     */\\r\\n    modifier tokenOwnerOnly(\\r\\n        uint256 _id\\r\\n    )\\r\\n    {\\r\\n        require(balanceOf(msgSender(), _id) > 0, \\\"ERC1155Tradable#tokenOwnerOnly: CALLER_NO_TOKEN_OWNER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Require token is already minted.\\r\\n     */\\r\\n    modifier existentTokenOnly(\\r\\n        uint256 _id\\r\\n    )\\r\\n    {\\r\\n        require(exists(_id), \\\"ERC1155Tradable#existentTokenOnly: NON_EXISTENT_TOKEN\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155Tradable-exists}.\\r\\n     */\\r\\n    function exists(\\r\\n        uint256 _id\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        return creator[_id] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155Tradable-setCreator}.\\r\\n     */\\r\\n    function setCreator(\\r\\n        address _to,\\r\\n        uint256 _id\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        existentTokenOnly(_id)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_to != address(0), \\\"ERC1155Tradable#setCreator: INVALID_ADDRESS\\\");\\r\\n        _setCreator(_to, _id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155Tradable-setCreatorBatch}.\\r\\n     */\\r\\n    function setCreatorBatch(\\r\\n        address _to,\\r\\n        uint256[] memory _ids\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_to != address(0), \\\"ERC1155Tradable#setCreatorBatch: INVALID_ADDRESS\\\");\\r\\n        for (uint256 i = 0; i < _ids.length; i++) {\\r\\n            uint256 id = _ids[i];\\r\\n            require(exists(id), \\\"ERC1155Tradable#setCreatorBatch: NON_EXISTENT_TOKEN\\\");\\r\\n            _setCreator(_to, id);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155Tradable-burn}.\\r\\n     */\\r\\n    function burn(\\r\\n        address _account,\\r\\n        uint256 _id,\\r\\n        uint256 _value\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        virtual\\r\\n    {\\r\\n        require(\\r\\n            _account == msgSender() || isApprovedForAll(_account, msgSender()),\\r\\n            \\\"ERC1155Tradable#burn: CALLER_NO_OWNER_NOR_APPROVED\\\"\\r\\n        );\\r\\n\\r\\n        _burn(_account, _id, _value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC1155Tradable-burnBatch}.\\r\\n     */\\r\\n    function burnBatch(\\r\\n        address _account,\\r\\n        uint256[] memory _ids,\\r\\n        uint256[] memory _values\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        virtual\\r\\n    {\\r\\n        require(\\r\\n            _account == msgSender() || isApprovedForAll(_account, msgSender()),\\r\\n            \\\"ERC1155Tradable#burnBatch: CALLER_NO_OWNER_NOR_APPROVED\\\"\\r\\n        );\\r\\n\\r\\n        _burnBatch(_account, _ids, _values);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new token type and assigns _initialSupply to an address.\\r\\n     * @param _initialOwner address of the first owner of the token.\\r\\n     * @param _initialSupply amount to supply the first owner.\\r\\n     * @param _data Data to pass if receiver is contract.\\r\\n     * @return The newly created token ID.\\r\\n     */\\r\\n    function _create(\\r\\n        address _initialOwner,\\r\\n        uint256 _initialSupply,\\r\\n        bytes memory _data\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 id = _newTokenId();\\r\\n        creator[id] = msgSender();\\r\\n        if (_initialOwner != address(0)) {\\r\\n            super._mint(_initialOwner, id, _initialSupply, _data);\\r\\n            tokenSupply[id] = _initialSupply;\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints some amount of tokens to an address.\\r\\n     * @param _id          Token ID to mint.\\r\\n     * @param _quantity    Amount of tokens to mint.\\r\\n     * @param _data        Data to pass if receiver is contract.\\r\\n     */\\r\\n    function _mint(\\r\\n        address _to,\\r\\n        uint256 _id,\\r\\n        uint256 _quantity,\\r\\n        bytes memory _data\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n        existentTokenOnly(_id)\\r\\n    {\\r\\n        super._mint(_to, _id, _quantity, _data);\\r\\n        tokenSupply[_id] += _quantity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mint tokens for each id in _ids.\\r\\n     * @param _ids         Array of ids to mint.\\r\\n     * @param _quantities  Array of amounts of tokens to mint per id.\\r\\n     * @param _data        Data to pass if receiver is contract.\\r\\n     */\\r\\n    function _mintBatch(\\r\\n        address _to,\\r\\n        uint256[] memory _ids,\\r\\n        uint256[] memory _quantities,\\r\\n        bytes memory _data\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        override\\r\\n    {\\r\\n        super._mintBatch(_to, _ids, _quantities, _data);\\r\\n        for (uint256 i = 0; i < _ids.length; i++) {\\r\\n            uint256 id = _ids[i];\\r\\n            uint256 quantity = _quantities[i];\\r\\n            tokenSupply[id] += quantity;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change the creator address for given token.\\r\\n     * @param _to   Address of the new creator.\\r\\n     * @param _id  Token IDs to change creator of.\\r\\n     */\\r\\n    function _setCreator(\\r\\n        address _to,\\r\\n        uint256 _id\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        creator[_id] = _to;\\r\\n    }\\r\\n\\r\\n    function _newTokenId()\\r\\n        internal\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return ++tokenID;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb348b564234b97a745b2219e52939ff0b16cf9fa1d5e6247dbd7b371db014b30\",\"license\":\"MIT\"},\"contracts/interfaces/IBadgeStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC1155Tradable.sol\\\";\\r\\n\\r\\ninterface IBadgeStore is IERC1155Tradable {\\r\\n    function badgePrice(\\r\\n        uint256 _badgeId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function badgeAdmin(\\r\\n        uint256 _badgeId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function setRevenueAddress(\\r\\n        address _revenueAddress\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    function setGovernance(\\r\\n        address _governance\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    function setBadgePrice(\\r\\n        uint256 _badgeId,\\r\\n        uint256 _price\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    function setPlatformFee(\\r\\n        uint256 _fee\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    function setBadgeAdmin(\\r\\n        address _badgeAdmin,\\r\\n        uint256 _badgeId\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    function createBadge(\\r\\n        address _badgeAdmin,\\r\\n        uint256 _price\\r\\n    )\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    function purchaseBadge(\\r\\n        uint256 _badgeId,\\r\\n        uint256 _amount\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    function grantBadge(\\r\\n        address _to,\\r\\n        uint256 _badgeId,\\r\\n        uint256 _amount\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    function purchaseBadgeBatch(\\r\\n        uint256[] memory _badgeIds,\\r\\n        uint256[] memory _amounts\\r\\n    )\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8f0a5b044455f1049111dbdefb591048d591dfccafa9f4c399f5675dae2a9b4f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155Tradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\n\\r\\ninterface IERC1155Tradable is IERC1155 {\\r\\n    /**\\r\\n     * @dev Returns whether the specified token exists by checking to see if it has a creator\\r\\n     */\\r\\n    function exists(\\r\\n        uint256 _id\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets creator of token type `_id` to `_to`.\\r\\n     */\\r\\n    function setCreator(\\r\\n        address _to,\\r\\n        uint256 _id\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @dev Batched version of {setCreator}.\\r\\n     */\\r\\n    function setCreatorBatch(\\r\\n        address _to,\\r\\n        uint256[] memory _ids\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @dev Burn token.\\r\\n     */\\r\\n    function burn(\\r\\n        address _account,\\r\\n        uint256 _id,\\r\\n        uint256 _value\\r\\n    )\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @dev Batched version of {burn}.\\r\\n     */\\r\\n    function burnBatch(\\r\\n        address _account,\\r\\n        uint256[] memory _ids,\\r\\n        uint256[] memory _values\\r\\n    )\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0x493d3a0855799be5b87c2a24c92765c3766a3de8f4aa447a4dc11cf4134e00cd\",\"license\":\"MIT\"},\"contracts/metatx-standard/EIP712MetaTransaction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./lib/EIP712Base.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract EIP712MetaTransaction is EIP712Base {\\r\\n    using SafeMath for uint256;\\r\\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(bytes(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"));\\r\\n\\r\\n    event MetaTransactionExecuted(address userAddress, address payable relayerAddress, bytes functionSignature);\\r\\n    mapping(address => uint256) private nonces;\\r\\n\\r\\n    /*\\r\\n     * Meta transaction structure.\\r\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\r\\n     * He should call the desired function directly in that case.\\r\\n     */\\r\\n    struct MetaTransaction {\\r\\n        uint256 nonce;\\r\\n        address from;\\r\\n        bytes functionSignature;\\r\\n    }\\r\\n\\r\\n    constructor(string memory name, string memory version) public EIP712Base(name, version) {}\\r\\n\\r\\n    function convertBytesToBytes4(bytes memory inBytes) internal returns (bytes4 outBytes4) {\\r\\n        if (inBytes.length == 0) {\\r\\n            return 0x0;\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            outBytes4 := mload(add(inBytes, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function executeMetaTransaction(address userAddress,\\r\\n        bytes memory functionSignature, bytes32 sigR, bytes32 sigS, uint8 sigV) public payable returns(bytes memory) {\\r\\n        bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\\r\\n        require(destinationFunctionSig != msg.sig, \\\"functionSignature can not be of executeMetaTransaction method\\\");\\r\\n        MetaTransaction memory metaTx = MetaTransaction({\\r\\n            nonce: nonces[userAddress],\\r\\n            from: userAddress,\\r\\n            functionSignature: functionSignature\\r\\n        });\\r\\n        require(verify(userAddress, metaTx, sigR, sigS, sigV), \\\"Signer and signature do not match\\\");\\r\\n        nonces[userAddress] = nonces[userAddress].add(1);\\r\\n        // Append userAddress at the end to extract it from calling context\\r\\n        (bool success, bytes memory returnData) = address(this).call(abi.encodePacked(functionSignature, userAddress));\\r\\n\\r\\n        require(success, \\\"Function call not successful\\\");\\r\\n        emit MetaTransactionExecuted(userAddress, payable(msg.sender), functionSignature);\\r\\n        return returnData;\\r\\n    }\\r\\n\\r\\n    function hashMetaTransaction(MetaTransaction memory metaTx) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            META_TRANSACTION_TYPEHASH,\\r\\n            metaTx.nonce,\\r\\n            metaTx.from,\\r\\n            keccak256(metaTx.functionSignature)\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function getNonce(address user) external view returns(uint256 nonce) {\\r\\n        nonce = nonces[user];\\r\\n    }\\r\\n\\r\\n    function verify(address user, MetaTransaction memory metaTx, bytes32 sigR, bytes32 sigS, uint8 sigV) internal view returns (bool) {\\r\\n        address signer = ecrecover(toTypedMessageHash(hashMetaTransaction(metaTx)), sigV, sigR, sigS);\\r\\n        require(signer != address(0), \\\"Invalid signature\\\");\\r\\n        return signer == user;\\r\\n    }\\r\\n\\r\\n    function msgSender() internal view returns(address sender) {\\r\\n        if(msg.sender == address(this)) {\\r\\n            bytes memory array = msg.data;\\r\\n            uint256 index = msg.data.length;\\r\\n            assembly {\\r\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\r\\n                sender := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\r\\n            }\\r\\n        } else {\\r\\n            sender = msg.sender;\\r\\n        }\\r\\n        return sender;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3f71aca8025badddc0d5d8f996aee1ee78094a50af1c5a79560866621ddee3d7\",\"license\":\"MIT\"},\"contracts/metatx-standard/lib/EIP712Base.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract EIP712Base {\\r\\n\\r\\n    struct EIP712Domain {\\r\\n        string name;\\r\\n        string version;\\r\\n        address verifyingContract;\\r\\n        bytes32 salt;\\r\\n    }\\r\\n\\r\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(bytes(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"));\\r\\n\\r\\n    bytes32 internal domainSeparator;\\r\\n\\r\\n    constructor(string memory name, string memory version) public {\\r\\n        domainSeparator = keccak256(abi.encode(\\r\\n            EIP712_DOMAIN_TYPEHASH,\\r\\n            keccak256(bytes(name)),\\r\\n            keccak256(bytes(version)),\\r\\n            address(this),\\r\\n            bytes32(getChainID())\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function getChainID() internal view returns (uint256 id) {\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getDomainSeparator() private view returns(bytes32) {\\r\\n        return domainSeparator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Accept message hash and returns hash message in EIP712 compatible form\\r\\n    * So that it can be used to recover signer from signature signed using EIP712 formatted data\\r\\n    * https://eips.ethereum.org/EIPS/eip-712\\r\\n    * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\r\\n    * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\r\\n    */\\r\\n    function toTypedMessageHash(bytes32 messageHash) internal view returns(bytes32) {\\r\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), messageHash));\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x36d0bc604e3f9f541aa9a3f64f5972ba3a978524f26dfa459b4ac7b1aa75ec24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526005600d553480156200001657600080fd5b5060405162003cdf38038062003cdf833981016040819052620000399162000300565b85858582818181856200004c8162000138565b50620000583362000151565b6040518060800160405280604f815260200162003c90604f91398051906020012082805190602001208280519060200120306200009a620001a360201b60201c565b60408051602081019690965285019390935260608401919091526001600160a01b0316608083015260a082015260c00160408051808303601f190181529190528051602090910120600455505060016009555050600a80546001600160a01b03199081166001600160a01b0398891617909155600b80548216968816969096179095555050600c805490931691909316179055506200043a92505050565b80516200014d906002906020840190620001a7565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b4690565b828054620001b590620003ce565b90600052602060002090601f016020900481019282620001d9576000855562000224565b82601f10620001f457805160ff191683800117855562000224565b8280016001018555821562000224579182015b828111156200022457825182559160200191906001019062000207565b506200023292915062000236565b5090565b5b8082111562000232576000815560010162000237565b600082601f8301126200025e578081fd5b81516001600160401b03808211156200027b576200027b6200040b565b604051601f8301601f19908116603f01168101908282118183101715620002a657620002a66200040b565b81604052838152602092508683858801011115620002c2578485fd5b8491505b83821015620002e55785820183015181830184015290820190620002c6565b83821115620002f657848385830101525b9695505050505050565b60008060008060008060c0878903121562000319578182fd5b86516001600160401b038082111562000330578384fd5b6200033e8a838b016200024d565b9750602089015191508082111562000354578384fd5b620003628a838b016200024d565b9650604089015191508082111562000378578384fd5b506200038789828a016200024d565b94505060608701516200039a8162000421565b6080880151909350620003ad8162000421565b60a0880151909250620003c08162000421565b809150509295509295509295565b600181811c90821680620003e357607f821691505b602082108114156200040557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200043757600080fd5b50565b613846806200044a6000396000f3fe6080604052600436106102045760003560e01c8063785b523e11610113578063c8cb8a75116100ab578063e985e9c51161006f578063e985e9c5146106b6578063f242432a146106ff578063f2fde38b1461071f578063f5298aca1461073f578063fa02ae3b1461075f57600080fd5b8063c8cb8a75146105e2578063ceacf81314610602578063d73792a914610661578063d7763f8414610676578063e4b845b51461069657600080fd5b8063785b523e146104d75780638da5cb5b146104f75780639d246cce1461050c578063a22cb4651461052c578063a5c42ef11461054c578063a8a6c0fb14610562578063ab033ea914610582578063b410908d146105a2578063ba3655d0146105c257600080fd5b80633b9ba4d4116101a1578063510b515811610165578063510b515814610414578063566486d9146104625780635aa6e675146104825780636b20c454146104a2578063715018a6146104c257600080fd5b80633b9ba4d41461036757806342f808951461038757806345338d63146103a75780634e1273f4146103c75780634f558e79146103f457600080fd5b8062fdd58e1461020957806301ffc9a71461023c5780630c53c51c1461026c5780630e89341c1461028c57806312e8e2c3146102ac57806326232a2e146102ce5780632693ebf2146102e45780632d0335ab146103115780632eb2c2d614610347575b600080fd5b34801561021557600080fd5b50610229610224366004612f10565b61077f565b6040519081526020015b60405180910390f35b34801561024857600080fd5b5061025c610257366004613090565b610816565b6040519015158152602001610233565b61027f61027a366004612e98565b610868565b6040516102339190613306565b34801561029857600080fd5b5061027f6102a73660046130c8565b610adf565b3480156102b857600080fd5b506102cc6102c73660046130c8565b610b73565b005b3480156102da57600080fd5b50610229600d5481565b3480156102f057600080fd5b506102296102ff3660046130c8565b60086020526000908152604090205481565b34801561031d57600080fd5b5061022961032c366004612c54565b6001600160a01b031660009081526005602052604090205490565b34801561035357600080fd5b506102cc610362366004612ca0565b610bfa565b34801561037357600080fd5b506102cc6103823660046130f8565b610c91565b34801561039357600080fd5b506102cc6103a2366004612da7565b610d59565b3480156103b357600080fd5b506102cc6103c2366004612c54565b610ec2565b3480156103d357600080fd5b506103e76103e2366004612f6b565b610f7f565b60405161023391906132ce565b34801561040057600080fd5b5061025c61040f3660046130c8565b6110e0565b34801561042057600080fd5b5061044a61042f3660046130c8565b6007602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610233565b34801561046e57600080fd5b50600a5461044a906001600160a01b031681565b34801561048e57600080fd5b50600c5461044a906001600160a01b031681565b3480156104ae57600080fd5b506102cc6104bd366004612df2565b6110fd565b3480156104ce57600080fd5b506102cc6111a2565b3480156104e357600080fd5b5061044a6104f23660046130c8565b6111dd565b34801561050357600080fd5b5061044a611226565b34801561051857600080fd5b50610229610527366004612f10565b611235565b34801561053857600080fd5b506102cc610547366004612e62565b61133e565b34801561055857600080fd5b5061022960065481565b34801561056e57600080fd5b506102cc61057d366004612f10565b611415565b34801561058e57600080fd5b506102cc61059d366004612c54565b6114c6565b3480156105ae57600080fd5b50600b5461044a906001600160a01b031681565b3480156105ce57600080fd5b506102296105dd3660046130c8565b61157f565b3480156105ee57600080fd5b506102cc6105fd366004612f10565b6115be565b34801561060e57600080fd5b5061064261061d3660046130c8565b600e60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610233565b34801561066d57600080fd5b50610229606481565b34801561068257600080fd5b506102cc610691366004612f39565b611687565b3480156106a257600080fd5b506102cc6106b136600461302b565b611887565b3480156106c257600080fd5b5061025c6106d1366004612c6e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561070b57600080fd5b506102cc61071a366004612d45565b61199c565b34801561072b57600080fd5b506102cc61073a366004612c54565b611a23565b34801561074b57600080fd5b506102cc61075a366004612f39565b611ac3565b34801561076b57600080fd5b506102cc61077a3660046130f8565b611b63565b60006001600160a01b0383166107f05760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061084757506001600160e01b031982166303a24d0760e21b145b8061086257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600061087586611c27565b90506000356001600160e01b031990811690821614156108fd5760405162461bcd60e51b815260206004820152603d60248201527f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060448201527f657865637574654d6574615472616e73616374696f6e206d6574686f6400000060648201526084016107e7565b604080516060810182526001600160a01b0389166000818152600560209081529084902054835282015290810187905261093a8882888888611c43565b6109905760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084016107e7565b6001600160a01b0388166000908152600560205260409020546109b4906001611d1f565b6001600160a01b03891660009081526005602090815260408083209390935591519091829130916109e9918c918e910161319b565b60408051601f1981840301815290829052610a039161317f565b6000604051808303816000865af19150503d8060008114610a40576040519150601f19603f3d011682016040523d82523d6000602084013e610a45565b606091505b509150915081610a975760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c0000000060448201526064016107e7565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b604051610aca939291906131d2565b60405180910390a19998505050505050505050565b606060028054610aee90613641565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1a90613641565b8015610b675780601f10610b3c57610100808354040283529160200191610b67565b820191906000526020600020905b815481529060010190602001808311610b4a57829003601f168201915b50505050509050919050565b600c546001600160a01b0316610b87611d2b565b6001600160a01b031614610bf55760405162461bcd60e51b815260206004820152602f60248201527f426164676553746f726523736574506c6174666f726d4665653a2043414c4c4560448201526e525f4e4f5f474f5645524e414e434560881b60648201526084016107e7565b600d55565b6001600160a01b038516331480610c165750610c1685336106d1565b610c7d5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016107e7565b610c8a8585858585611d88565b5050505050565b81610c9b816110e0565b610cb75760405162461bcd60e51b81526004016107e790613361565b60026009541415610cda5760405162461bcd60e51b81526004016107e790613549565b600260095581610d3d5760405162461bcd60e51b815260206004820152602860248201527f426164676553746f726523707572636861736542616467653a20494e56414c496044820152671117d05353d5539560c21b60648201526084016107e7565b610d4f610d48611d2b565b8484611f40565b5050600160095550565b33610d62611226565b6001600160a01b031614610d885760405162461bcd60e51b81526004016107e7906134cc565b6001600160a01b038216610df75760405162461bcd60e51b815260206004820152603060248201527f455243313135355472616461626c652373657443726561746f7242617463683a60448201526f20494e56414c49445f4144445245535360801b60648201526084016107e7565b60005b8151811015610ebd576000828281518110610e2557634e487b7160e01b600052603260045260246000fd5b60200260200101519050610e38816110e0565b610ea05760405162461bcd60e51b815260206004820152603360248201527f455243313135355472616461626c652373657443726561746f7242617463683a604482015272102727a72fa2ac24a9aa22a72a2faa27a5a2a760691b60648201526084016107e7565b610eaa8482612201565b5080610eb5816136a2565b915050610dfa565b505050565b33610ecb611226565b6001600160a01b031614610ef15760405162461bcd60e51b81526004016107e7906134cc565b6001600160a01b038116610f5d5760405162461bcd60e51b815260206004820152602d60248201527f426164676553746f726523736574526576656e7565416464726573733a20494e60448201526c56414c49445f4144445245535360981b60648201526084016107e7565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60608151835114610fe45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107e7565b600083516001600160401b0381111561100d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611036578160200160208202803683370190505b50905060005b84518110156110d85761109d85828151811061106857634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061109057634e487b7160e01b600052603260045260246000fd5b602002602001015161077f565b8282815181106110bd57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526110d1816136a2565b905061103c565b509392505050565b6000908152600760205260409020546001600160a01b0316151590565b611105611d2b565b6001600160a01b0316836001600160a01b0316148061112b575061112b836106d1611d2b565b6111975760405162461bcd60e51b815260206004820152603760248201527f455243313135355472616461626c65236275726e42617463683a2043414c4c456044820152761497d393d7d3d5d3915497d393d497d054141493d59151604a1b60648201526084016107e7565b610ebd83838361222f565b336111ab611226565b6001600160a01b0316146111d15760405162461bcd60e51b81526004016107e7906134cc565b6111db60006123c7565b565b6000816111e9816110e0565b6112055760405162461bcd60e51b81526004016107e790613361565b6000838152600e60205260409020546001600160a01b031691505b50919050565b6003546001600160a01b031690565b600c546000906001600160a01b031661124c611d2b565b6001600160a01b0316146112b75760405162461bcd60e51b815260206004820152602c60248201527f426164676553746f72652363726561746542616467653a2043414c4c45525f4e60448201526b4f5f474f5645524e414e434560a01b60648201526084016107e7565b60006112d484600160405180602001604052806000815250612419565b9050836001600160a01b03167f701fca9fe1d09f8f50f9c6af29911d30ee0b35c4f4b8f6c138f73ab488e9525c8260405161131191815260200190565b60405180910390a26000818152600e602052604090206001018390556113378482612483565b9392505050565b336001600160a01b03831614156113a95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107e7565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b8061141f816110e0565b61143b5760405162461bcd60e51b81526004016107e790613361565b600c546001600160a01b031661144f611d2b565b6001600160a01b0316146114bc5760405162461bcd60e51b815260206004820152602e60248201527f426164676553746f726523736574426164676541646d696e3a2043414c4c455260448201526d5f4e4f5f474f5645524e414e434560901b60648201526084016107e7565b610ebd8383612483565b336114cf611226565b6001600160a01b0316146114f55760405162461bcd60e51b81526004016107e7906134cc565b6001600160a01b03811661155d5760405162461bcd60e51b815260206004820152602960248201527f426164676553746f726523736574476f7665726e616e63653a20494e56414c49604482015268445f4144445245535360b81b60648201526084016107e7565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60008161158b816110e0565b6115a75760405162461bcd60e51b81526004016107e790613361565b50506000908152600e602052604090206001015490565b806115c8816110e0565b6115e45760405162461bcd60e51b81526004016107e790613361565b336115ed611226565b6001600160a01b0316146116135760405162461bcd60e51b81526004016107e7906134cc565b6001600160a01b03831661167d5760405162461bcd60e51b815260206004820152602b60248201527f455243313135355472616461626c652373657443726561746f723a20494e564160448201526a4c49445f4144445245535360a81b60648201526084016107e7565b610ebd8383612201565b81611691816110e0565b6116ad5760405162461bcd60e51b81526004016107e790613361565b600260095414156116d05760405162461bcd60e51b81526004016107e790613549565b60026009556116de836111dd565b6001600160a01b03166116ef611d2b565b6001600160a01b03161461175a5760405162461bcd60e51b815260206004820152602c60248201527f426164676553746f7265236772616e7442616467653a2043414c4c45525f4e4f60448201526b2fa120a223a2afa0a226a4a760a11b60648201526084016107e7565b6001600160a01b0384166117bf5760405162461bcd60e51b815260206004820152602660248201527f426164676553746f7265236772616e7442616467653a20494e56414c49445f4160448201526544445245535360d01b60648201526084016107e7565b6000821161181d5760405162461bcd60e51b815260206004820152602560248201527f426164676553746f7265236772616e7442616467653a20494e56414c49445f416044820152641353d5539560da1b60648201526084016107e7565b611838848484604051806020016040528060008152506124b1565b60408051848152602081018490526001600160a01b038616917ff1179ee5b4df7a07f60b6537e15c07608e15b042ceb38e36fde2b52a70e37109910160405180910390a2505060016009555050565b600260095414156118aa5760405162461bcd60e51b81526004016107e790613549565b6002600955805182511461191e5760405162461bcd60e51b815260206004820152603560248201527f426164676553746f7265237075726368617365426164676542617463683a2050604482015274082a4829aa6be988a9c8ea890be9a92a69a82a8869605b1b60648201526084016107e7565b60005b8251811015610d4f5761198a611935611d2b565b84838151811061195557634e487b7160e01b600052603260045260246000fd5b602002602001015184848151811061197d57634e487b7160e01b600052603260045260246000fd5b6020026020010151611f40565b80611994816136a2565b915050611921565b6001600160a01b0385163314806119b857506119b885336106d1565b611a165760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016107e7565b610c8a858585858561250d565b33611a2c611226565b6001600160a01b031614611a525760405162461bcd60e51b81526004016107e7906134cc565b6001600160a01b038116611ab75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107e7565b611ac0816123c7565b50565b611acb611d2b565b6001600160a01b0316836001600160a01b03161480611af15750611af1836106d1611d2b565b611b585760405162461bcd60e51b815260206004820152603260248201527f455243313135355472616461626c65236275726e3a2043414c4c45525f4e4f5f60448201527113d5d3915497d393d497d054141493d5915160721b60648201526084016107e7565b610ebd838383612621565b81611b6d816110e0565b611b895760405162461bcd60e51b81526004016107e790613361565b611b92836111dd565b6001600160a01b0316611ba3611d2b565b6001600160a01b031614611c115760405162461bcd60e51b815260206004820152602f60248201527f426164676553746f726523736574426164676550726963653a2043414c4c455260448201526e2fa727afa120a223a2afa0a226a4a760891b60648201526084016107e7565b506000918252600e602052604090912060010155565b6000815160001415611c3b57506000919050565b506020015190565b6000806001611c59611c5488612711565b61278e565b6040805160008152602081018083529290925260ff861690820152606081018790526080810186905260a0016020604051602081039080840390855afa158015611ca7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611cfe5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016107e7565b866001600160a01b0316816001600160a01b03161491505095945050505050565b600061133782846135a3565b600033301415611d8257600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150611d859050565b50335b90565b8151835114611da95760405162461bcd60e51b81526004016107e790613501565b6001600160a01b038416611dcf5760405162461bcd60e51b81526004016107e7906133fa565b3360005b8451811015611ed2576000858281518110611dfe57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611e2a57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611e7a5760405162461bcd60e51b81526004016107e790613482565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611eb79084906135a3565b9250508190555050505080611ecb906136a2565b9050611dd3565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f229291906132e1565b60405180910390a4611f388187878787876127be565b505050505050565b6000828152600e60205260409020600101541561219d576000828152600e6020526040812060010154611f749083906135db565b905060006064600d5483611f8891906135db565b611f9291906135bb565b600a546040516370a0823160e01b81526001600160a01b0388811660048301529293508492909116906370a082319060240160206040518083038186803b158015611fdc57600080fd5b505afa158015611ff0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201491906130e0565b10156120785760405162461bcd60e51b815260206004820152602d60248201527f426164676553746f7265235f707572636861736542616467653a20494e53554660448201526c46494349454e545f46554e445360981b60648201526084016107e7565b600a54600b546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926120b1928a92909116908690600401613265565b602060405180830381600087803b1580156120cb57600080fd5b505af11580156120df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121039190613074565b50600a546001600160a01b03166323b872dd8661211f876111dd565b61212985876135fa565b6040518463ffffffff1660e01b815260040161214793929190613265565b602060405180830381600087803b15801561216157600080fd5b505af1158015612175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121999190613074565b5050505b6121b8838383604051806020016040528060008152506124b1565b60408051838152602081018390526001600160a01b038516917f6a86d8fb0fa4fa0f74c2f74f9b87d359e78289e71aa96936d78c18b95886d561910160405180910390a2505050565b600090815260076020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166122555760405162461bcd60e51b81526004016107e79061343f565b80518251146122765760405162461bcd60e51b81526004016107e790613501565b604080516020810190915260009081905233905b83518110156123685760008482815181106122b557634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008483815181106122e157634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156123315760405162461bcd60e51b81526004016107e7906133b6565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580612360816136a2565b91505061228a565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516123b99291906132e1565b60405180910390a450505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080612424612929565b905061242e611d2b565b600082815260076020526040902080546001600160a01b0319166001600160a01b0392831617905585161561247b5761246985828686612944565b60008181526008602052604090208490555b949350505050565b6000908152600e6020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b826124bb816110e0565b6124d75760405162461bcd60e51b81526004016107e790613361565b6124e385858585612944565b600084815260086020526040812080548592906125019084906135a3565b90915550505050505050565b6001600160a01b0384166125335760405162461bcd60e51b81526004016107e7906133fa565b3361254c81878761254388612a33565b610c8a88612a33565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561258d5760405162461bcd60e51b81526004016107e790613482565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906125ca9084906135a3565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616916000805160206137ae833981519152910160405180910390a4612618828888888888612a8c565b50505050505050565b6001600160a01b0383166126475760405162461bcd60e51b81526004016107e79061343f565b336126778185600061265887612a33565b61266187612a33565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156126b85760405162461bcd60e51b81526004016107e7906133b6565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616916000805160206137ae833981519152910160405180910390a45050505050565b60006040518060800160405280604381526020016137ce6043913980516020918201208351848301516040808701518051908601209051612771950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b600061279960045490565b60405161190160f01b6020820152602281019190915260428101839052606201612771565b6001600160a01b0384163b15611f385760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906128029089908990889088908890600401613207565b602060405180830381600087803b15801561281c57600080fd5b505af192505050801561284c575060408051601f3d908101601f19168201909252612849918101906130ac565b60015b6128f9576128586136e9565b806308c379a01415612892575061286d613700565b806128785750612894565b8060405162461bcd60e51b81526004016107e79190613306565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107e7565b6001600160e01b0319811663bc197c8160e01b146126185760405162461bcd60e51b81526004016107e790613319565b600060066000815461293a906136a2565b9182905550919050565b6001600160a01b0384166129a45760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107e7565b336129b58160008761254388612a33565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906129e59084906135a3565b909155505060408051858152602081018590526001600160a01b0380881692600092918516916000805160206137ae833981519152910160405180910390a4610c8a81600087878787612a8c565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612a7b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611f385760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612ad09089908990889088908890600401613289565b602060405180830381600087803b158015612aea57600080fd5b505af1925050508015612b1a575060408051601f3d908101601f19168201909252612b17918101906130ac565b60015b612b26576128586136e9565b6001600160e01b0319811663f23a6e6160e01b146126185760405162461bcd60e51b81526004016107e790613319565b80356001600160a01b0381168114612b6d57600080fd5b919050565b600082601f830112612b82578081fd5b81356020612b8f82613580565b604051612b9c8282613676565b8381528281019150858301600585901b87018401881015612bbb578586fd5b855b85811015612bd957813584529284019290840190600101612bbd565b5090979650505050505050565b600082601f830112612bf6578081fd5b81356001600160401b03811115612c0f57612c0f6136d3565b604051612c26601f8301601f191660200182613676565b818152846020838601011115612c3a578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612c65578081fd5b61133782612b56565b60008060408385031215612c80578081fd5b612c8983612b56565b9150612c9760208401612b56565b90509250929050565b600080600080600060a08688031215612cb7578081fd5b612cc086612b56565b9450612cce60208701612b56565b935060408601356001600160401b0380821115612ce9578283fd5b612cf589838a01612b72565b94506060880135915080821115612d0a578283fd5b612d1689838a01612b72565b93506080880135915080821115612d2b578283fd5b50612d3888828901612be6565b9150509295509295909350565b600080600080600060a08688031215612d5c578081fd5b612d6586612b56565b9450612d7360208701612b56565b9350604086013592506060860135915060808601356001600160401b03811115612d9b578182fd5b612d3888828901612be6565b60008060408385031215612db9578182fd5b612dc283612b56565b915060208301356001600160401b03811115612ddc578182fd5b612de885828601612b72565b9150509250929050565b600080600060608486031215612e06578283fd5b612e0f84612b56565b925060208401356001600160401b0380821115612e2a578384fd5b612e3687838801612b72565b93506040860135915080821115612e4b578283fd5b50612e5886828701612b72565b9150509250925092565b60008060408385031215612e74578182fd5b612e7d83612b56565b91506020830135612e8d81613789565b809150509250929050565b600080600080600060a08688031215612eaf578283fd5b612eb886612b56565b945060208601356001600160401b03811115612ed2578384fd5b612ede88828901612be6565b9450506040860135925060608601359150608086013560ff81168114612f02578182fd5b809150509295509295909350565b60008060408385031215612f22578182fd5b612f2b83612b56565b946020939093013593505050565b600080600060608486031215612f4d578081fd5b612f5684612b56565b95602085013595506040909401359392505050565b60008060408385031215612f7d578182fd5b82356001600160401b0380821115612f93578384fd5b818501915085601f830112612fa6578384fd5b81356020612fb382613580565b604051612fc08282613676565b8381528281019150858301600585901b870184018b1015612fdf578889fd5b8896505b8487101561300857612ff481612b56565b835260019690960195918301918301612fe3565b509650508601359250508082111561301e578283fd5b50612de885828601612b72565b6000806040838503121561303d578182fd5b82356001600160401b0380821115613053578384fd5b61305f86838701612b72565b9350602085013591508082111561301e578283fd5b600060208284031215613085578081fd5b815161133781613789565b6000602082840312156130a1578081fd5b813561133781613797565b6000602082840312156130bd578081fd5b815161133781613797565b6000602082840312156130d9578081fd5b5035919050565b6000602082840312156130f1578081fd5b5051919050565b6000806040838503121561310a578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156131485781518752958201959082019060010161312c565b509495945050505050565b6000815180845261316b816020860160208601613611565b601f01601f19169290920160200192915050565b60008251613191818460208701613611565b9190910192915050565b600083516131ad818460208801613611565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b6001600160a01b038481168252831660208201526060604082018190526000906131fe90830184613153565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061323390830186613119565b82810360608401526132458186613119565b905082810360808401526132598185613153565b98975050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906132c390830184613153565b979650505050505050565b6020815260006113376020830184613119565b6040815260006132f46040830185613119565b82810360208401526131fe8185613119565b6020815260006113376020830184613153565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526035908201527f455243313135355472616461626c65236578697374656e74546f6b656e4f6e6c6040820152743c9d102727a72fa2ac24a9aa22a72a2faa27a5a2a760591b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006001600160401b03821115613599576135996136d3565b5060051b60200190565b600082198211156135b6576135b66136bd565b500190565b6000826135d657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156135f5576135f56136bd565b500290565b60008282101561360c5761360c6136bd565b500390565b60005b8381101561362c578181015183820152602001613614565b8381111561363b576000848401525b50505050565b600181811c9082168061365557607f821691505b6020821081141561122057634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b038111828210171561369b5761369b6136d3565b6040525050565b60006000198214156136b6576136b66136bd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115611d8557600481823e5160e01c90565b600060443d101561370e5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561373d57505050505090565b82850191508151818111156137555750505050505090565b843d870101602082850101111561376f5750505050505090565b61377e60208286010187613676565b509095945050505050565b8015158114611ac057600080fd5b6001600160e01b031981168114611ac057600080fdfec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f624d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220a1e59398c86b12ba3b623c78b5de096a53809b997e2c36bd4f725208f315c12964736f6c63430008040033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c8063785b523e11610113578063c8cb8a75116100ab578063e985e9c51161006f578063e985e9c5146106b6578063f242432a146106ff578063f2fde38b1461071f578063f5298aca1461073f578063fa02ae3b1461075f57600080fd5b8063c8cb8a75146105e2578063ceacf81314610602578063d73792a914610661578063d7763f8414610676578063e4b845b51461069657600080fd5b8063785b523e146104d75780638da5cb5b146104f75780639d246cce1461050c578063a22cb4651461052c578063a5c42ef11461054c578063a8a6c0fb14610562578063ab033ea914610582578063b410908d146105a2578063ba3655d0146105c257600080fd5b80633b9ba4d4116101a1578063510b515811610165578063510b515814610414578063566486d9146104625780635aa6e675146104825780636b20c454146104a2578063715018a6146104c257600080fd5b80633b9ba4d41461036757806342f808951461038757806345338d63146103a75780634e1273f4146103c75780634f558e79146103f457600080fd5b8062fdd58e1461020957806301ffc9a71461023c5780630c53c51c1461026c5780630e89341c1461028c57806312e8e2c3146102ac57806326232a2e146102ce5780632693ebf2146102e45780632d0335ab146103115780632eb2c2d614610347575b600080fd5b34801561021557600080fd5b50610229610224366004612f10565b61077f565b6040519081526020015b60405180910390f35b34801561024857600080fd5b5061025c610257366004613090565b610816565b6040519015158152602001610233565b61027f61027a366004612e98565b610868565b6040516102339190613306565b34801561029857600080fd5b5061027f6102a73660046130c8565b610adf565b3480156102b857600080fd5b506102cc6102c73660046130c8565b610b73565b005b3480156102da57600080fd5b50610229600d5481565b3480156102f057600080fd5b506102296102ff3660046130c8565b60086020526000908152604090205481565b34801561031d57600080fd5b5061022961032c366004612c54565b6001600160a01b031660009081526005602052604090205490565b34801561035357600080fd5b506102cc610362366004612ca0565b610bfa565b34801561037357600080fd5b506102cc6103823660046130f8565b610c91565b34801561039357600080fd5b506102cc6103a2366004612da7565b610d59565b3480156103b357600080fd5b506102cc6103c2366004612c54565b610ec2565b3480156103d357600080fd5b506103e76103e2366004612f6b565b610f7f565b60405161023391906132ce565b34801561040057600080fd5b5061025c61040f3660046130c8565b6110e0565b34801561042057600080fd5b5061044a61042f3660046130c8565b6007602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610233565b34801561046e57600080fd5b50600a5461044a906001600160a01b031681565b34801561048e57600080fd5b50600c5461044a906001600160a01b031681565b3480156104ae57600080fd5b506102cc6104bd366004612df2565b6110fd565b3480156104ce57600080fd5b506102cc6111a2565b3480156104e357600080fd5b5061044a6104f23660046130c8565b6111dd565b34801561050357600080fd5b5061044a611226565b34801561051857600080fd5b50610229610527366004612f10565b611235565b34801561053857600080fd5b506102cc610547366004612e62565b61133e565b34801561055857600080fd5b5061022960065481565b34801561056e57600080fd5b506102cc61057d366004612f10565b611415565b34801561058e57600080fd5b506102cc61059d366004612c54565b6114c6565b3480156105ae57600080fd5b50600b5461044a906001600160a01b031681565b3480156105ce57600080fd5b506102296105dd3660046130c8565b61157f565b3480156105ee57600080fd5b506102cc6105fd366004612f10565b6115be565b34801561060e57600080fd5b5061064261061d3660046130c8565b600e60205260009081526040902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610233565b34801561066d57600080fd5b50610229606481565b34801561068257600080fd5b506102cc610691366004612f39565b611687565b3480156106a257600080fd5b506102cc6106b136600461302b565b611887565b3480156106c257600080fd5b5061025c6106d1366004612c6e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561070b57600080fd5b506102cc61071a366004612d45565b61199c565b34801561072b57600080fd5b506102cc61073a366004612c54565b611a23565b34801561074b57600080fd5b506102cc61075a366004612f39565b611ac3565b34801561076b57600080fd5b506102cc61077a3660046130f8565b611b63565b60006001600160a01b0383166107f05760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061084757506001600160e01b031982166303a24d0760e21b145b8061086257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600061087586611c27565b90506000356001600160e01b031990811690821614156108fd5760405162461bcd60e51b815260206004820152603d60248201527f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060448201527f657865637574654d6574615472616e73616374696f6e206d6574686f6400000060648201526084016107e7565b604080516060810182526001600160a01b0389166000818152600560209081529084902054835282015290810187905261093a8882888888611c43565b6109905760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084016107e7565b6001600160a01b0388166000908152600560205260409020546109b4906001611d1f565b6001600160a01b03891660009081526005602090815260408083209390935591519091829130916109e9918c918e910161319b565b60408051601f1981840301815290829052610a039161317f565b6000604051808303816000865af19150503d8060008114610a40576040519150601f19603f3d011682016040523d82523d6000602084013e610a45565b606091505b509150915081610a975760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c0000000060448201526064016107e7565b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b604051610aca939291906131d2565b60405180910390a19998505050505050505050565b606060028054610aee90613641565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1a90613641565b8015610b675780601f10610b3c57610100808354040283529160200191610b67565b820191906000526020600020905b815481529060010190602001808311610b4a57829003601f168201915b50505050509050919050565b600c546001600160a01b0316610b87611d2b565b6001600160a01b031614610bf55760405162461bcd60e51b815260206004820152602f60248201527f426164676553746f726523736574506c6174666f726d4665653a2043414c4c4560448201526e525f4e4f5f474f5645524e414e434560881b60648201526084016107e7565b600d55565b6001600160a01b038516331480610c165750610c1685336106d1565b610c7d5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016107e7565b610c8a8585858585611d88565b5050505050565b81610c9b816110e0565b610cb75760405162461bcd60e51b81526004016107e790613361565b60026009541415610cda5760405162461bcd60e51b81526004016107e790613549565b600260095581610d3d5760405162461bcd60e51b815260206004820152602860248201527f426164676553746f726523707572636861736542616467653a20494e56414c496044820152671117d05353d5539560c21b60648201526084016107e7565b610d4f610d48611d2b565b8484611f40565b5050600160095550565b33610d62611226565b6001600160a01b031614610d885760405162461bcd60e51b81526004016107e7906134cc565b6001600160a01b038216610df75760405162461bcd60e51b815260206004820152603060248201527f455243313135355472616461626c652373657443726561746f7242617463683a60448201526f20494e56414c49445f4144445245535360801b60648201526084016107e7565b60005b8151811015610ebd576000828281518110610e2557634e487b7160e01b600052603260045260246000fd5b60200260200101519050610e38816110e0565b610ea05760405162461bcd60e51b815260206004820152603360248201527f455243313135355472616461626c652373657443726561746f7242617463683a604482015272102727a72fa2ac24a9aa22a72a2faa27a5a2a760691b60648201526084016107e7565b610eaa8482612201565b5080610eb5816136a2565b915050610dfa565b505050565b33610ecb611226565b6001600160a01b031614610ef15760405162461bcd60e51b81526004016107e7906134cc565b6001600160a01b038116610f5d5760405162461bcd60e51b815260206004820152602d60248201527f426164676553746f726523736574526576656e7565416464726573733a20494e60448201526c56414c49445f4144445245535360981b60648201526084016107e7565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60608151835114610fe45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107e7565b600083516001600160401b0381111561100d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611036578160200160208202803683370190505b50905060005b84518110156110d85761109d85828151811061106857634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061109057634e487b7160e01b600052603260045260246000fd5b602002602001015161077f565b8282815181106110bd57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526110d1816136a2565b905061103c565b509392505050565b6000908152600760205260409020546001600160a01b0316151590565b611105611d2b565b6001600160a01b0316836001600160a01b0316148061112b575061112b836106d1611d2b565b6111975760405162461bcd60e51b815260206004820152603760248201527f455243313135355472616461626c65236275726e42617463683a2043414c4c456044820152761497d393d7d3d5d3915497d393d497d054141493d59151604a1b60648201526084016107e7565b610ebd83838361222f565b336111ab611226565b6001600160a01b0316146111d15760405162461bcd60e51b81526004016107e7906134cc565b6111db60006123c7565b565b6000816111e9816110e0565b6112055760405162461bcd60e51b81526004016107e790613361565b6000838152600e60205260409020546001600160a01b031691505b50919050565b6003546001600160a01b031690565b600c546000906001600160a01b031661124c611d2b565b6001600160a01b0316146112b75760405162461bcd60e51b815260206004820152602c60248201527f426164676553746f72652363726561746542616467653a2043414c4c45525f4e60448201526b4f5f474f5645524e414e434560a01b60648201526084016107e7565b60006112d484600160405180602001604052806000815250612419565b9050836001600160a01b03167f701fca9fe1d09f8f50f9c6af29911d30ee0b35c4f4b8f6c138f73ab488e9525c8260405161131191815260200190565b60405180910390a26000818152600e602052604090206001018390556113378482612483565b9392505050565b336001600160a01b03831614156113a95760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107e7565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b8061141f816110e0565b61143b5760405162461bcd60e51b81526004016107e790613361565b600c546001600160a01b031661144f611d2b565b6001600160a01b0316146114bc5760405162461bcd60e51b815260206004820152602e60248201527f426164676553746f726523736574426164676541646d696e3a2043414c4c455260448201526d5f4e4f5f474f5645524e414e434560901b60648201526084016107e7565b610ebd8383612483565b336114cf611226565b6001600160a01b0316146114f55760405162461bcd60e51b81526004016107e7906134cc565b6001600160a01b03811661155d5760405162461bcd60e51b815260206004820152602960248201527f426164676553746f726523736574476f7665726e616e63653a20494e56414c49604482015268445f4144445245535360b81b60648201526084016107e7565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60008161158b816110e0565b6115a75760405162461bcd60e51b81526004016107e790613361565b50506000908152600e602052604090206001015490565b806115c8816110e0565b6115e45760405162461bcd60e51b81526004016107e790613361565b336115ed611226565b6001600160a01b0316146116135760405162461bcd60e51b81526004016107e7906134cc565b6001600160a01b03831661167d5760405162461bcd60e51b815260206004820152602b60248201527f455243313135355472616461626c652373657443726561746f723a20494e564160448201526a4c49445f4144445245535360a81b60648201526084016107e7565b610ebd8383612201565b81611691816110e0565b6116ad5760405162461bcd60e51b81526004016107e790613361565b600260095414156116d05760405162461bcd60e51b81526004016107e790613549565b60026009556116de836111dd565b6001600160a01b03166116ef611d2b565b6001600160a01b03161461175a5760405162461bcd60e51b815260206004820152602c60248201527f426164676553746f7265236772616e7442616467653a2043414c4c45525f4e4f60448201526b2fa120a223a2afa0a226a4a760a11b60648201526084016107e7565b6001600160a01b0384166117bf5760405162461bcd60e51b815260206004820152602660248201527f426164676553746f7265236772616e7442616467653a20494e56414c49445f4160448201526544445245535360d01b60648201526084016107e7565b6000821161181d5760405162461bcd60e51b815260206004820152602560248201527f426164676553746f7265236772616e7442616467653a20494e56414c49445f416044820152641353d5539560da1b60648201526084016107e7565b611838848484604051806020016040528060008152506124b1565b60408051848152602081018490526001600160a01b038616917ff1179ee5b4df7a07f60b6537e15c07608e15b042ceb38e36fde2b52a70e37109910160405180910390a2505060016009555050565b600260095414156118aa5760405162461bcd60e51b81526004016107e790613549565b6002600955805182511461191e5760405162461bcd60e51b815260206004820152603560248201527f426164676553746f7265237075726368617365426164676542617463683a2050604482015274082a4829aa6be988a9c8ea890be9a92a69a82a8869605b1b60648201526084016107e7565b60005b8251811015610d4f5761198a611935611d2b565b84838151811061195557634e487b7160e01b600052603260045260246000fd5b602002602001015184848151811061197d57634e487b7160e01b600052603260045260246000fd5b6020026020010151611f40565b80611994816136a2565b915050611921565b6001600160a01b0385163314806119b857506119b885336106d1565b611a165760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016107e7565b610c8a858585858561250d565b33611a2c611226565b6001600160a01b031614611a525760405162461bcd60e51b81526004016107e7906134cc565b6001600160a01b038116611ab75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107e7565b611ac0816123c7565b50565b611acb611d2b565b6001600160a01b0316836001600160a01b03161480611af15750611af1836106d1611d2b565b611b585760405162461bcd60e51b815260206004820152603260248201527f455243313135355472616461626c65236275726e3a2043414c4c45525f4e4f5f60448201527113d5d3915497d393d497d054141493d5915160721b60648201526084016107e7565b610ebd838383612621565b81611b6d816110e0565b611b895760405162461bcd60e51b81526004016107e790613361565b611b92836111dd565b6001600160a01b0316611ba3611d2b565b6001600160a01b031614611c115760405162461bcd60e51b815260206004820152602f60248201527f426164676553746f726523736574426164676550726963653a2043414c4c455260448201526e2fa727afa120a223a2afa0a226a4a760891b60648201526084016107e7565b506000918252600e602052604090912060010155565b6000815160001415611c3b57506000919050565b506020015190565b6000806001611c59611c5488612711565b61278e565b6040805160008152602081018083529290925260ff861690820152606081018790526080810186905260a0016020604051602081039080840390855afa158015611ca7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611cfe5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016107e7565b866001600160a01b0316816001600160a01b03161491505095945050505050565b600061133782846135a3565b600033301415611d8257600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150611d859050565b50335b90565b8151835114611da95760405162461bcd60e51b81526004016107e790613501565b6001600160a01b038416611dcf5760405162461bcd60e51b81526004016107e7906133fa565b3360005b8451811015611ed2576000858281518110611dfe57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611e2a57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611e7a5760405162461bcd60e51b81526004016107e790613482565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611eb79084906135a3565b9250508190555050505080611ecb906136a2565b9050611dd3565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f229291906132e1565b60405180910390a4611f388187878787876127be565b505050505050565b6000828152600e60205260409020600101541561219d576000828152600e6020526040812060010154611f749083906135db565b905060006064600d5483611f8891906135db565b611f9291906135bb565b600a546040516370a0823160e01b81526001600160a01b0388811660048301529293508492909116906370a082319060240160206040518083038186803b158015611fdc57600080fd5b505afa158015611ff0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201491906130e0565b10156120785760405162461bcd60e51b815260206004820152602d60248201527f426164676553746f7265235f707572636861736542616467653a20494e53554660448201526c46494349454e545f46554e445360981b60648201526084016107e7565b600a54600b546040516323b872dd60e01b81526001600160a01b03928316926323b872dd926120b1928a92909116908690600401613265565b602060405180830381600087803b1580156120cb57600080fd5b505af11580156120df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121039190613074565b50600a546001600160a01b03166323b872dd8661211f876111dd565b61212985876135fa565b6040518463ffffffff1660e01b815260040161214793929190613265565b602060405180830381600087803b15801561216157600080fd5b505af1158015612175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121999190613074565b5050505b6121b8838383604051806020016040528060008152506124b1565b60408051838152602081018390526001600160a01b038516917f6a86d8fb0fa4fa0f74c2f74f9b87d359e78289e71aa96936d78c18b95886d561910160405180910390a2505050565b600090815260076020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166122555760405162461bcd60e51b81526004016107e79061343f565b80518251146122765760405162461bcd60e51b81526004016107e790613501565b604080516020810190915260009081905233905b83518110156123685760008482815181106122b557634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008483815181106122e157634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156123315760405162461bcd60e51b81526004016107e7906133b6565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580612360816136a2565b91505061228a565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516123b99291906132e1565b60405180910390a450505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080612424612929565b905061242e611d2b565b600082815260076020526040902080546001600160a01b0319166001600160a01b0392831617905585161561247b5761246985828686612944565b60008181526008602052604090208490555b949350505050565b6000908152600e6020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b826124bb816110e0565b6124d75760405162461bcd60e51b81526004016107e790613361565b6124e385858585612944565b600084815260086020526040812080548592906125019084906135a3565b90915550505050505050565b6001600160a01b0384166125335760405162461bcd60e51b81526004016107e7906133fa565b3361254c81878761254388612a33565b610c8a88612a33565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561258d5760405162461bcd60e51b81526004016107e790613482565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906125ca9084906135a3565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616916000805160206137ae833981519152910160405180910390a4612618828888888888612a8c565b50505050505050565b6001600160a01b0383166126475760405162461bcd60e51b81526004016107e79061343f565b336126778185600061265887612a33565b61266187612a33565b5050604080516020810190915260009052505050565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156126b85760405162461bcd60e51b81526004016107e7906133b6565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616916000805160206137ae833981519152910160405180910390a45050505050565b60006040518060800160405280604381526020016137ce6043913980516020918201208351848301516040808701518051908601209051612771950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b600061279960045490565b60405161190160f01b6020820152602281019190915260428101839052606201612771565b6001600160a01b0384163b15611f385760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906128029089908990889088908890600401613207565b602060405180830381600087803b15801561281c57600080fd5b505af192505050801561284c575060408051601f3d908101601f19168201909252612849918101906130ac565b60015b6128f9576128586136e9565b806308c379a01415612892575061286d613700565b806128785750612894565b8060405162461bcd60e51b81526004016107e79190613306565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107e7565b6001600160e01b0319811663bc197c8160e01b146126185760405162461bcd60e51b81526004016107e790613319565b600060066000815461293a906136a2565b9182905550919050565b6001600160a01b0384166129a45760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107e7565b336129b58160008761254388612a33565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906129e59084906135a3565b909155505060408051858152602081018590526001600160a01b0380881692600092918516916000805160206137ae833981519152910160405180910390a4610c8a81600087878787612a8c565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612a7b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611f385760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612ad09089908990889088908890600401613289565b602060405180830381600087803b158015612aea57600080fd5b505af1925050508015612b1a575060408051601f3d908101601f19168201909252612b17918101906130ac565b60015b612b26576128586136e9565b6001600160e01b0319811663f23a6e6160e01b146126185760405162461bcd60e51b81526004016107e790613319565b80356001600160a01b0381168114612b6d57600080fd5b919050565b600082601f830112612b82578081fd5b81356020612b8f82613580565b604051612b9c8282613676565b8381528281019150858301600585901b87018401881015612bbb578586fd5b855b85811015612bd957813584529284019290840190600101612bbd565b5090979650505050505050565b600082601f830112612bf6578081fd5b81356001600160401b03811115612c0f57612c0f6136d3565b604051612c26601f8301601f191660200182613676565b818152846020838601011115612c3a578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215612c65578081fd5b61133782612b56565b60008060408385031215612c80578081fd5b612c8983612b56565b9150612c9760208401612b56565b90509250929050565b600080600080600060a08688031215612cb7578081fd5b612cc086612b56565b9450612cce60208701612b56565b935060408601356001600160401b0380821115612ce9578283fd5b612cf589838a01612b72565b94506060880135915080821115612d0a578283fd5b612d1689838a01612b72565b93506080880135915080821115612d2b578283fd5b50612d3888828901612be6565b9150509295509295909350565b600080600080600060a08688031215612d5c578081fd5b612d6586612b56565b9450612d7360208701612b56565b9350604086013592506060860135915060808601356001600160401b03811115612d9b578182fd5b612d3888828901612be6565b60008060408385031215612db9578182fd5b612dc283612b56565b915060208301356001600160401b03811115612ddc578182fd5b612de885828601612b72565b9150509250929050565b600080600060608486031215612e06578283fd5b612e0f84612b56565b925060208401356001600160401b0380821115612e2a578384fd5b612e3687838801612b72565b93506040860135915080821115612e4b578283fd5b50612e5886828701612b72565b9150509250925092565b60008060408385031215612e74578182fd5b612e7d83612b56565b91506020830135612e8d81613789565b809150509250929050565b600080600080600060a08688031215612eaf578283fd5b612eb886612b56565b945060208601356001600160401b03811115612ed2578384fd5b612ede88828901612be6565b9450506040860135925060608601359150608086013560ff81168114612f02578182fd5b809150509295509295909350565b60008060408385031215612f22578182fd5b612f2b83612b56565b946020939093013593505050565b600080600060608486031215612f4d578081fd5b612f5684612b56565b95602085013595506040909401359392505050565b60008060408385031215612f7d578182fd5b82356001600160401b0380821115612f93578384fd5b818501915085601f830112612fa6578384fd5b81356020612fb382613580565b604051612fc08282613676565b8381528281019150858301600585901b870184018b1015612fdf578889fd5b8896505b8487101561300857612ff481612b56565b835260019690960195918301918301612fe3565b509650508601359250508082111561301e578283fd5b50612de885828601612b72565b6000806040838503121561303d578182fd5b82356001600160401b0380821115613053578384fd5b61305f86838701612b72565b9350602085013591508082111561301e578283fd5b600060208284031215613085578081fd5b815161133781613789565b6000602082840312156130a1578081fd5b813561133781613797565b6000602082840312156130bd578081fd5b815161133781613797565b6000602082840312156130d9578081fd5b5035919050565b6000602082840312156130f1578081fd5b5051919050565b6000806040838503121561310a578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156131485781518752958201959082019060010161312c565b509495945050505050565b6000815180845261316b816020860160208601613611565b601f01601f19169290920160200192915050565b60008251613191818460208701613611565b9190910192915050565b600083516131ad818460208801613611565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b6001600160a01b038481168252831660208201526060604082018190526000906131fe90830184613153565b95945050505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061323390830186613119565b82810360608401526132458186613119565b905082810360808401526132598185613153565b98975050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906132c390830184613153565b979650505050505050565b6020815260006113376020830184613119565b6040815260006132f46040830185613119565b82810360208401526131fe8185613119565b6020815260006113376020830184613153565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526035908201527f455243313135355472616461626c65236578697374656e74546f6b656e4f6e6c6040820152743c9d102727a72fa2ac24a9aa22a72a2faa27a5a2a760591b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60006001600160401b03821115613599576135996136d3565b5060051b60200190565b600082198211156135b6576135b66136bd565b500190565b6000826135d657634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156135f5576135f56136bd565b500290565b60008282101561360c5761360c6136bd565b500390565b60005b8381101561362c578181015183820152602001613614565b8381111561363b576000848401525b50505050565b600181811c9082168061365557607f821691505b6020821081141561122057634e487b7160e01b600052602260045260246000fd5b601f8201601f191681016001600160401b038111828210171561369b5761369b6136d3565b6040525050565b60006000198214156136b6576136b66136bd565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115611d8557600481823e5160e01c90565b600060443d101561370e5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561373d57505050505090565b82850191508151818111156137555750505050505090565b843d870101602082850101111561376f5750505050505090565b61377e60208286010187613676565b509095945050505050565b8015158114611ac057600080fd5b6001600160e01b031981168114611ac057600080fdfec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f624d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220a1e59398c86b12ba3b623c78b5de096a53809b997e2c36bd4f725208f315c12964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "badgeAdmin(uint256)": {
        "details": "Return admin address of badge token."
      },
      "badgePrice(uint256)": {
        "details": "Return price of badge token."
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "details": "See {IERC1155Tradable-burn}."
      },
      "burnBatch(address,uint256[],uint256[])": {
        "details": "See {IERC1155Tradable-burnBatch}."
      },
      "createBadge(address,uint256)": {
        "details": "Create new badge type. Accessible only by governance. `_badgeAdmin` cannot be the zero address."
      },
      "exists(uint256)": {
        "details": "See {IERC1155Tradable-exists}."
      },
      "grantBadge(address,uint256,uint256)": {
        "details": "Grant badge for free. Accessible only by badge token admin. `_to` cannot be the zero address."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "purchaseBadge(uint256,uint256)": {
        "details": "Purchase badge token."
      },
      "purchaseBadgeBatch(uint256[],uint256[])": {
        "details": "Batch version of {purchaseBadge}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setBadgeAdmin(address,uint256)": {
        "details": "Return admin address of badge token."
      },
      "setBadgePrice(uint256,uint256)": {
        "details": "Set price of badge token."
      },
      "setCreator(address,uint256)": {
        "details": "See {IERC1155Tradable-setCreator}."
      },
      "setCreatorBatch(address,uint256[])": {
        "details": "See {IERC1155Tradable-setCreatorBatch}."
      },
      "setGovernance(address)": {
        "details": "Set platform governance address."
      },
      "setPlatformFee(uint256)": {
        "details": "Set platform fee."
      },
      "setRevenueAddress(address)": {
        "details": "Set revenue address."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 169,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 175,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 177,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4117,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "domainSeparator",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 3846,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3275,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "tokenID",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3279,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "creator",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3283,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 114,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2740,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "spn",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)2030"
      },
      {
        "astId": 2742,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "revenueAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2744,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "governance",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2747,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "platformFee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2755,
        "contract": "contracts/BadgeStore.sol:BadgeStore",
        "label": "badgeProps",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(BadgeProp)2737_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2030": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(BadgeProp)2737_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BadgeStore.BadgeProp)",
        "numberOfBytes": "32",
        "value": "t_struct(BadgeProp)2737_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BadgeProp)2737_storage": {
        "encoding": "inplace",
        "label": "struct BadgeStore.BadgeProp",
        "members": [
          {
            "astId": 2734,
            "contract": "contracts/BadgeStore.sol:BadgeStore",
            "label": "admin",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2736,
            "contract": "contracts/BadgeStore.sol:BadgeStore",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}